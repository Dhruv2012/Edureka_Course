import java.util.Scanner;  // Import the Scanner class
abstract class account{
	long accountno;
	double amount;
	String name;
	abstract void withdraw(double amt);
	abstract void deposit(double amt);
}

class sb_account extends account{
	float interest = 0.04f;
	final double minBalance=1000; // min balance for saving account
	sb_account(){
		System.out.println("Minimum Balance to continue SB-Account is 1000 R.S");
		this.amount=minBalance;
	}
	void withdraw(double amt){
		if(amt<this.minBalance) {
			this.amount-=amt;
			System.out.println("Withdrawal Sucessfull");
		}else {
			System.out.println("Withdrawal is not possible! You have less balance");
			System.out.println("Minimum Balance to continue acount is 1000 R.S");
		}
	}
	void deposit(double amt){
		if(amt>0) {
			this.amount+=amt;
			System.out.println("Deposit Sucessfull");
		}else {
			System.out.println("Enter Valid Money");
		}
	}
	
	void showBalance() {
		 System.out.print("Your Balance of SB-Account is : ");
		 System.out.println(this.amount);		
	}
}

class current_account extends account{
	final double minBalance=500; // min balance for saving account
	current_account(){
		System.out.println("Minimum Balance to continue Current-Account is 500 R.S");
		this.amount=minBalance;
	}
	
	@Override
	void deposit(double money) {
		if(money>0) {
			this.amount+=money;
			System.out.println("Deposite Sucessfull");
		}else {
			System.out.println("Enter Valid Money");
		}
	}

	@Override
	void withdraw(double moneyRequirement) {
		if(moneyRequirement<this.minBalance) {
			this.amount-=moneyRequirement;
			System.out.println("Withdrawal Sucessfull");
		}else {
			System.out.println("Withdrawal is not possible! You have less balance");
			System.out.println("Minimum Balance to continue acount is 500 R.S");
		}
	}
	
	 void showBalance() {
		 System.out.print("Your Balance of Current Acount is : ");
		 System.out.println(this.amount);
	 }
}
public class casestudy1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc =new Scanner(System.in);
		System.out.println("What kind of Account Do you want to have?");
		System.out.println("Enter 1 for SB-Account");
		System.out.println("Enter 2 for Current-Account");
		
		int typeOfAcc=sc.nextInt();
		
		if(typeOfAcc==1) {
			sb_account ac=new sb_account();
			
			System.out.println("Enter Ammount to Deposite");
			ac.deposit(sc.nextDouble());
			System.out.println("Enter Ammount to Withdraw");
			ac.withdraw(sc.nextDouble());
			System.out.println("Showing Your Balance");
			ac.showBalance();
		}else {
			current_account ac=new current_account();

			System.out.println("Enter Ammount to Deposite");
			ac.deposite(sc.nextDouble());
			System.out.println("Enter Ammount to Withdraw");
			ac.withdraw(sc.nextDouble());
			System.out.println("Showing Your Balance");
			ac.showBalance();
		}
		sc.close();
	    
	}

}
